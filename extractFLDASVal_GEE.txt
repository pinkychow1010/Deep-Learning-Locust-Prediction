var pts = ee.FeatureCollection("projects/ee-pinkychow1010/assets/datapoint_04_05")

var months = ee.List.sequence(1, 12);
var years = ee.List.sequence(2004, 2005);

var bands = ['Evap_tavg', 'Psurf_f_tavg', 'Qair_f_tavg', 'Qg_tavg', 
    'Qh_tavg', 'Qle_tavg', 'Qs_tavg', 'RadT_tavg', 'Rainf_f_tavg',
    'SoilMoi00_10cm_tavg','SoilMoi10_40cm_tavg','SoilMoi40_100cm_tavg',
    'SoilMoi100_200cm_tavg','SoilTemp00_10cm_tavg',
    'SoilTemp10_40cm_tavg','SoilTemp40_100cm_tavg','SoilTemp100_200cm_tavg',
    'Tair_f_tavg','Wind_f_tavg'];

var rename = ['evap', 'pressure', 'humid', 'soilheat', 
    'heatnet', 'latheat', 'runoff', 'radtemp', 'prep',
    'soilmoi_10cm','soilmoi_40cm','soilmoi_1m','soilmoi_2m','soiltemp_10cm',
    'soiltemp_40cm','soiltemp_1m','soiltemp_2m','surfacetemp','windspeed'];
    
// Selects and renames bands of interest for Landsat OLI.

function bufferPoints(radius, bounds) {
  return function(pt) {
    pt = ee.Feature(pt);
    return bounds ? pt.buffer(radius).bounds() : pt.buffer(radius);
  };
}

var pts = pts.map(bufferPoints(15, true));

var Col = ee.ImageCollection("NASA/FLDAS/NOAH01/C/GL/M/V001")
  .filterBounds(pts)
  .select(bands,rename);
  
var byMonthYear_Col = ee.ImageCollection.fromImages(
  years.map(function(y) {
    return months.map(function (m) {
      return Col
        .filter(ee.Filter.calendarRange(y, y, 'year'))
        .filter(ee.Filter.calendarRange(m, m, 'month'))
        .select(bands)
        .mean()
        .set('month', m).set('year', y);
  });
}).flatten()); 

print(Col)
print(byMonthYear_Col)

var composites = ee.ImageCollection.fromImages(years.map(function(y) {
  return months.map(function(m) {
  var filtered = Col
  .filter(ee.Filter.calendarRange(y,y, 'year'))
  .filter(ee.Filter.calendarRange(m,m, 'month'));
  var composite = filtered.median();
  var systemStart = filtered.reduceColumns(ee.Reducer.min(), ['system:time_start']).get('min');
  return composite.set('month', m).set('year', y).set('system:time_start', systemStart);
  });
}).flatten());

print(composites.first().bandNames())

// Define parameters for the zonalStats function.
var params = {
  reducer: ee.Reducer.mean(),
  scale: 30,
  bands: bands,
  datetimeName: 'date',
  datetimeFormat: 'YYYY-MM-dd'
};

var listOfImages = composites.toList(composites.size());

var newList = listOfImages.map(function comprobeBandsNumber(ele){
  var new_list = ee.List([]); 
  var count = ee.Image(ele).bandNames().size();
  var comp = ee.Algorithms.If(count.eq(19), ele, 0);
  new_list = new_list.add(comp);
  return new_list;
}).flatten();

newList = newList.removeAll([0]);
print(newList);

//creating new collection
var clean_composites = ee.ImageCollection(newList);

// Extract zonal statistics per point per image.
var ptsStats = zonalStats(clean_composites, pts, params);
print(ptsStats.limit(10));

// Export Results

Export.table.toDrive({
  collection: ptsStats,
  //folder: 'DeepLearningProject',
  description: 'climateVarSample',
  fileFormat: 'CSV'
});

function zonalStats(ic, fc, params) {
  // Initialize internal params dictionary.
  var _params = {
    reducer: ee.Reducer.mean(),
    scale: null,
    crs: null,
    bands: null,
    bandsRename: null,
    imgProps: null,
    imgPropsRename: null,
    datetimeName: 'datetime',
    datetimeFormat: 'YYYY-MM-dd HH:mm:ss'
  };
  
  // Replace initialized params with provided params.
  if (params) {
    for (var param in params) {
      _params[param] = params[param] || _params[param];
    }
  }
  
  
  // Set default parameters based on an image representative.
  var imgRep = ic.first();
  var nonSystemImgProps = ee.Feature(null)
    .copyProperties(imgRep).propertyNames();
  if (!_params.bands) _params.bands = imgRep.bandNames();
  if (!_params.bandsRename) _params.bandsRename = _params.bands;
  if (!_params.imgProps) _params.imgProps = nonSystemImgProps;
  if (!_params.imgPropsRename) _params.imgPropsRename = _params.imgProps;
  
  // Map the reduceRegions function over the image collection.
  var results = ic.map(function(img) {
    // Select bands (optionally rename), set a datetime & timestamp property.
    img = ee.Image(img.select(_params.bands, _params.bandsRename))
      .set(_params.datetimeName, img.date().format(_params.datetimeFormat))
      .set('timestamp', img.get('system:time_start'));

    // Define final image property dictionary to set in output features.
    var propsFrom = ee.List(_params.imgProps)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var propsTo = ee.List(_params.imgPropsRename)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var imgProps = img.toDictionary(propsFrom).rename(propsFrom, propsTo);
    
    // Subset points that intersect the given image.
    var fcSub = fc.filterBounds(img.geometry());
    
    // Reduce the image by regions.
    return img.reduceRegions({
      collection: fcSub,
      reducer: _params.reducer,
      scale: _params.scale,
      crs: _params.crs
    })
    // Add metadata to each feature.
    .map(function(f) {
      return f.set(imgProps);
    });
  }).flatten().filter(ee.Filter.notNull(_params.bandsRename));
  
  return results;
}